// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3b\x59\x73\xdb\xb6\xba\xef\xfd\x15\x28\xce\x74\x22\x4d\x29\x88\xab\xb6\x48\x3a\x4d\xb3\xb4\xbd\xd7\x69\x32\x89\xdb\xce\xbd\x4d\x47\x03\x91\x30\xc5\x63\x10\xe0\x10\x90\x65\xc7\xe3\xff\x7e\x07\x20\x29\x01\x24\xbd\x24\xe7\xe1\xf4\xf6\xa1\x16\x81\x6f\xc7\xb7\xe1\x23\xb3\xfc\xf6\xd5\xbb\x97\xe7\xff\xf3\xfe\x35\xd8\xc9\x9c\xae\xbf\x59\x56\x7f\x00\x58\xee\x08\x4e\xd4\x0f\x00\x96\x32\x93\x94\xac\x73\x71\x21\x7c\xd7\x77\x47\x29\x1f\x5f\x5d\x94\x39\x2e\x96\xe3\x6a\xa7\x82\xa2\x19\xbb\x04\x25\xa1\x2b\x98\xc5\x9c\x41\x20\x6f\x0a\xb2\x82\x59\x8e\x53\x32\x2e\x58\x0a\xc1\xae\x24\x17\x2b\x98\x60\x89\x17\xc7\xd5\xe7\x5b\x2c\xc8\x24\x74\xb2\xdf\x7f\x7c\xf7\xe1\xe0\xfe\xf7\x4f\x29\x5f\xc1\x0e\x41\x21\x6f\x28\x11\x3b\x42\x64\x43\x85\x12\x7c\x41\x89\xfc\x97\x18\xd7\xbf\x50\x2c\x04\x04\xe3\x1a\x35\x27\x12\x03\x86\x73\xb2\x82\xb8\x28\x28\x19\xe5\x7c\x9b\x51\x32\x3a\x90\xed\x08\x17\xc5\x28\xc6\x05\xde\x52\x02\x41\xcc\x99\x24\x4c\xae\xe0\x0d\x11\xf0\x89\xc8\x42\x62\xb9\x17\xa3\x2d\x2e\x47\x5a\x30\x83\xca\x96\xe2\xf8\xf2\xa9\x74\xb4\xf1\x0c\xe4\xdf\xdf\x7c\x78\x8b\x8b\x06\x5b\xc4\x65\x56\x48\x20\xca\xb8\x4f\xdb\x7f\x09\xb8\x5e\x8e\x2b\x98\x27\x21\x94\x5c\x62\x49\x92\xb7\xb8\xbc\x24\x65\x2f\xba\x52\xa5\x3e\x34\x49\xae\xe5\x58\x19\xb4\xda\x03\xda\x39\x1c\xb0\xe5\xc9\x0d\xb8\xad\x97\x00\xd8\x91\x2c\xdd\xc9\x05\xf0\x5c\xf7\xbb\xe7\xc7\xd5\x1c\x97\x69\xc6\x16\xc0\x3d\x2d\x15\x38\x49\x32\x96\x1a\x6b\x77\xdf\xd4\x3f\x5a\x24\x93\x4c\x14\x14\xdf\x2c\xc0\x05\x25\xd7\x27\x02\xea\x69\x94\x64\x25\x89\x65\xc6\xd9\x02\xc4\x9c\xee\x73\xd6\x21\xf6\x8f\x1c\x17\x06\xb1\x2d\x8e\x2f\xd3\x92\xef\x59\x32\x8a\x39\xe5\xe5\x02\xa4\x25\xbe\x69\x51\x4d\x4b\x7e\x58\x00\xaf\x4b\x6b\x97\x25\x64\xb4\xdb\x27\x06\xc1\x82\x8b\xac\x12\x00\x6f\x05\xa7\x7b\x49\x4e\xc4\x24\x2f\x2c\x9d\x29\xb9\x90\xd6\xc2\xe7\x51\xc6\x12\x72\xbd\x00\x5e\xd8\x67\x19\x14\x91\xfc\xb4\x5e\xcb\xab\xdd\xc9\x10\x98\x33\x39\x12\xd9\x67\xb2\x00\x9e\x09\xad\xd7\x0f\xf5\x69\x6c\x39\x4d\x1e\x23\x14\xef\x4b\xa1\x96\x0b\x9e\x31\x49\xca\x93\xf2\x2d\xdd\x17\x3b\x7e\x45\x4a\xc3\x02\x35\xb9\xc3\x2e\x3b\xe9\x6e\x98\xcc\xb6\x56\xa3\x9b\x25\xab\x72\xad\x11\xa6\x59\xaa\x8e\x91\x98\xdc\xfb\xa9\xdb\x5a\xdb\x56\xea\x1e\xb0\xa5\xa7\x2d\x98\x28\x30\x43\x17\x19\xa1\x3d\x32\x8e\xca\xca\x76\xd6\x29\xdc\x75\xb0\xaf\x30\xdd\x13\x03\xdb\x90\xcc\x47\xee\xa3\x98\x1b\x91\x63\x4a\xfb\xf1\x3d\x13\xff\x24\x57\xed\x45\xc8\xeb\x21\x2e\x09\x25\x05\x2f\xe5\xa8\xe0\xc5\xbe\x00\x45\x8f\xe9\x5d\xe4\x9b\x54\x7b\x42\xf3\xfe\xe3\xb8\x9f\x0f\xc5\x5b\x42\x1f\x32\xa2\xdf\x96\x76\x39\xd6\xd9\x65\xfd\x8d\x99\xa9\x9a\xdc\x02\xf7\x82\x00\x21\xcb\x2c\x96\xf0\x79\x73\x64\x94\x48\xb0\xdb\x1f\x1d\x59\x3d\xe6\xb8\xb0\x1f\x55\x26\xeb\xae\x9c\xd7\xe2\x76\x77\x7e\x89\x39\x33\x57\xb5\x3e\xe6\xc2\x41\x58\xdb\x14\x33\xb2\xe9\x00\x35\xe6\xe8\xee\x5c\x70\x4a\xf9\x61\xa3\xf1\xc0\x0a\x5c\x60\x2a\x88\xb9\x4f\xb1\x90\x9b\x52\x23\x83\x15\xb8\xbd\x33\xf7\xc4\x55\xfa\x5e\xe1\x29\x19\x3f\xca\x32\x63\x29\x58\x81\x67\xcb\x7f\x5e\xe7\x14\x5c\x91\x52\x64\x9c\xad\xa0\x87\x5c\x08\x08\x8b\xb9\x32\xf7\x0a\xfe\x76\xfe\x66\x34\x83\x40\x48\xcc\x12\x4c\x39\x23\x2b\xc8\x38\xfc\xe7\x7a\x29\xae\x52\x70\x9d\x53\x26\x56\x70\x27\x65\xb1\x18\x8f\x0f\x87\x03\x3a\x04\x88\x97\xe9\xd8\x77\x5d\x77\x2c\xae\x54\x3d\xd6\x19\x63\x05\xfd\x70\x8e\x66\x21\x04\x87\x2c\x91\x3b\xf5\x38\x43\x7e\x04\x6d\xb6\x6b\x5d\xcd\x54\xed\x06\x59\xb2\x82\xcd\xc3\x1c\x8e\xd7\xcb\x02\xcb\x9d\x5e\x55\x3f\xa2\xa9\x1f\x42\x90\xac\xe0\x5b\xe0\x87\x53\x14\x79\xa1\x1b\x3a\x5e\xe4\xa3\xd0\xf5\x27\x13\xe0\x05\x73\xe4\x46\xd3\x99\xe7\x4c\x3d\x34\x73\xdd\x79\x38\x01\x31\x70\xd1\xcc\xf5\x27\x33\x67\xe4\xf9\x28\x8c\xbc\x59\x18\x01\x0f\x05\x7e\x38\x0d\x9c\x51\xe8\x22\x3f\x9a\x28\x5c\x17\xcd\xa2\x50\x41\x85\x11\x0a\xbd\x69\x34\x9f\x83\x51\x80\xe6\xa1\x1b\x84\xce\x28\x0c\x90\x3f\x99\x84\x13\x1f\x8c\x02\x0f\xf9\x81\xeb\xcd\x9c\x91\x1f\xa2\x49\xe0\x7a\xde\x3c\xd0\xab\xe1\x2c\x08\x22\x67\x14\xa1\xc0\x77\x83\xc9\x14\x8c\x5c\xe4\x4e\xe6\x81\x13\x21\x7f\xe6\x05\x13\x0f\x8c\x3c\xe4\x7a\x91\xeb\x3b\x81\x8f\xa2\xf9\x2c\x98\xcd\xd4\x92\xe7\x86\x53\xcf\x89\x5c\x34\x0b\x26\x13\xdf\x07\x67\xca\xc5\x67\xa1\x3f\xf5\xa6\x8e\x17\x85\x28\x98\x46\x13\x1f\xb8\x8e\x37\x73\x91\x37\x8f\xa6\x11\xa0\xc0\xf3\x5c\x14\xb9\x6e\x34\x73\x46\x91\x8b\xc2\x99\x1f\xcc\x41\x80\xe6\xf3\x20\xf0\x9d\x99\x8b\xfc\xb9\x37\x51\x32\xf9\xc8\x0d\xfd\x68\x32\x75\x7c\x1f\xcd\x83\x99\x37\x51\x32\xf9\x6e\x30\x0b\x23\xc7\x9b\xa0\xd9\x7c\x32\x0f\x40\xe8\x23\xc5\x6b\xea\x3b\x23\xcf\x43\xd1\x3c\xd2\xb6\x70\xdd\x99\xe3\x22\x2f\x98\x47\x0a\x60\xea\x05\x9e\xe7\x78\x2e\x9a\x7b\xb3\xe9\x5c\x51\x89\xdc\xb9\x3f\x77\x46\x8a\xca\xcc\xf7\x2a\x66\x61\x14\x4c\x43\x67\xe4\xfb\x28\x98\xcf\xdd\x00\xf8\x68\xe2\x79\x81\xef\x8c\x66\x2e\x0a\x22\xdf\x8d\x80\xe7\x79\x28\x88\xe6\xf3\xc8\x09\x67\x28\x72\x27\x9e\xa7\x68\x4d\x83\x70\xae\xf0\x22\x34\x9d\xfa\xf3\x08\x7c\x86\xe0\x22\xa3\x74\x54\xee\x29\x59\x41\x72\x45\x18\x4f\x92\x6a\x6d\x05\x37\x9b\x97\xef\xce\xde\x7d\xd8\x6c\x94\x6f\x28\x4f\x5b\x3f\xfb\xa6\x1d\x56\xca\xcd\x7f\x54\xb9\x1a\xac\xc0\x19\x52\xfd\xe2\xe0\x94\x4f\xd4\xe3\x6f\x25\x5d\x54\xae\x4e\x7e\xfb\xf0\xcb\xc0\xec\x1a\xc5\x55\xfa\xfd\x75\x4e\x1d\x08\xbe\xef\x09\x9b\x21\x2a\x49\x41\x71\x4c\x06\xf0\x1f\xd0\x81\xdf\xf9\x01\x34\x96\x4e\xb2\x39\xa0\x6e\xd6\x86\x8e\xc5\xf8\xa3\x4e\xc7\x7f\x4e\x42\x07\x4c\xc2\xbf\x9a\xbd\xbb\x61\x27\x33\x28\x96\x7f\xa8\x4a\xf5\x9f\x54\x41\x97\xca\x7f\x4b\x85\x9f\x4a\x42\xd8\x7f\x52\x85\x54\x09\xf0\x74\x15\xea\x9f\x09\x8f\xf7\x39\x61\x12\x71\x76\x49\x6e\xf6\x85\xca\xb7\x7b\xa6\xdb\xc3\x81\xf2\x47\x39\x34\x0a\x14\xc8\x2e\x40\xb5\x8a\x2e\xc9\x0d\x58\xad\x56\x00\xbe\x16\x31\x2e\x08\x1c\x1a\x50\xaa\x89\x4b\x53\x4a\x36\x55\x22\x1f\x0c\x4f\x65\xf2\x58\x0d\x8f\x3d\x45\xc3\x0d\xf0\x82\xb0\x4d\xc6\x36\x29\xe7\x0a\x37\xc7\x85\x18\x98\xcc\xaf\x70\x09\xf6\x25\x05\x2b\xa0\x93\xb1\xa8\xb3\x71\x05\x8e\x62\x9e\x8f\x15\xca\xf8\x07\x65\x48\xa3\x42\x20\x8a\x65\x26\xf7\x09\x01\xdf\x03\xe8\x74\x36\x39\x4b\xed\xdd\x1c\x17\x28\x25\xf2\x7f\x39\xcf\x07\x43\xb5\xfa\x19\x1e\x45\x38\x64\x2c\xe1\x07\xa4\x24\x1d\xec\x4b\xea\x3c\xdb\x6c\x29\x66\x97\xcf\x86\x9d\x4e\xe9\xa8\xd5\xbe\x48\xb0\x24\x6f\x71\x31\xc8\x45\x6a\xd9\x52\x2b\x54\x70\xa1\x7d\x86\x62\x79\xc6\x52\x05\x73\x94\xd7\x01\xfa\xa9\x11\xd0\x34\x62\x5d\x87\x91\x20\xf2\xac\x42\x2c\xb8\xb8\x07\xe0\x83\xba\xaf\x64\x9c\xbd\x60\x29\x25\x9a\x81\xba\x90\x2a\xd7\x3a\xfa\x80\xfa\xcf\x28\xd2\xa8\xe0\x02\x65\x8c\xa9\x16\xe0\x5a\x55\xd8\x5f\xf7\xf9\x96\x94\x8a\x87\x12\x6e\x88\x24\x7f\x93\x5d\x93\x64\x30\x19\x1e\xad\x66\x82\x28\xaf\x3d\x81\x98\x52\x8d\xc7\x26\x9b\x54\x99\x5a\xf3\xf9\xf9\xfc\xed\x99\x3a\xd7\x25\xae\x6e\xa5\x9f\x1e\x3f\xe1\x5a\x98\xa3\x00\x35\xe7\x07\x8e\xf1\x13\x5c\x57\x94\xd4\x9e\x58\x8e\xf1\x1a\x5a\x16\x50\xbe\x6d\x76\x1e\xf6\x61\x01\x4d\xb1\xc0\xec\x9c\x77\x8c\x7d\xd7\xea\xf4\xfa\x7d\xe0\xe7\xdf\x5e\xb5\x7d\x60\xb7\x4f\x10\xa6\xd5\x71\x5b\x16\x57\xc7\xd4\x6c\x3c\xb7\xc0\xeb\xc3\xeb\x40\xd7\xeb\x36\x30\xce\x4a\x51\x10\x92\x74\x69\xd7\x1b\x36\xf8\x15\x29\x65\x16\x63\xba\xe9\x47\xb2\xb7\xfb\x39\x6d\x64\xb9\xb7\x55\x81\x03\x7d\x1c\x06\x53\x0d\xa3\x8e\x64\x08\x6d\x22\x17\x14\x17\xa2\xc3\x56\xaf\xda\x80\xb2\xcc\xf2\x0e\x9c\x5a\xb4\xc1\xca\x7d\x92\x90\x72\xd3\x0b\x6d\xec\x75\x82\xf7\xa0\x62\x92\x91\x03\xf8\x83\x6c\x3f\xf2\xf8\x92\xc8\x01\x3c\x28\x6f\x54\x9a\xd4\x39\x80\xf2\x58\x87\x15\xda\x71\x21\x19\xce\xb5\x42\x8b\x3e\x00\xdd\xa6\x7e\x0f\xe0\xf8\x20\xe0\xd1\x6d\x0e\x02\x71\xa6\xf2\x88\x99\x6f\x4d\xd7\x18\x8f\x63\xce\x04\xa7\x04\x51\x9e\x2a\xf6\x3a\x3f\x9e\x08\xdc\x59\x94\x62\xca\x05\x79\x3a\x29\x0d\x7e\x1f\xad\x9c\x08\x81\x53\x8b\x1a\x69\xe7\xe1\x5c\xa8\xb6\xfa\xbf\x3e\xbe\xfb\x15\x15\xb8\x14\x64\x40\x90\x2a\x69\x46\x54\x74\x99\x2a\x00\xa8\x93\x9a\x01\x66\xb7\xf2\xb9\x48\x8d\x90\xb4\xc3\xc6\xd8\x50\x91\x9a\xe3\x02\x7c\xbb\x5a\x81\x3d\x4b\xc8\x45\xc6\x48\x62\x87\xab\x9d\x76\x4f\xfc\xee\x4e\x2a\xb7\xa3\x34\x63\x99\x54\x08\x6d\x5d\x5b\x29\x5a\x75\xe0\x53\x7f\xea\x8c\x3c\x34\x8d\xfc\xc0\x94\x4b\x41\x73\x91\xd7\xce\x73\x86\xce\x33\x4a\xce\xf0\x0d\x29\x07\xcd\xf5\xe1\x56\xdc\x21\x99\x51\xa2\x4b\x88\x90\x25\x21\x52\xa5\x15\x75\x9d\xb8\xfd\x7c\x37\xbe\xbd\xbe\x1b\xdf\xde\xdc\xa1\x82\xa5\xd0\xb1\xf4\xc9\xf1\xb5\x4a\x65\x0b\xe0\xcd\x1c\x73\x39\x63\xd5\xb2\x6f\xae\x5e\xf0\x32\xc7\x72\x01\x8c\x99\xa1\xb9\x2d\xf6\xdb\x84\xe7\x38\x63\x62\x01\xfe\x84\x58\x77\x70\xea\x7f\x31\xfc\xeb\x64\x27\xc3\x66\x5a\xad\x82\x30\x9c\x15\x9b\x18\xc7\x3b\x92\x6c\xb6\x58\x10\x75\x02\x4f\xd0\x54\x25\x5b\x54\xa3\x23\x46\xe4\x38\x25\xfc\x40\xb6\x9a\xd0\x58\x90\xf2\x2a\x8b\xc9\x58\xe6\x62\xec\x21\x17\xb9\xe3\x86\x51\xcd\xe1\x87\xd7\xef\x3f\xfe\xf4\x5d\xf0\x62\xee\xba\x73\x2f\xf8\xa1\x60\x4f\x37\x54\xd8\x6b\x28\x6b\x55\xe6\x62\x01\x54\x36\x72\xac\x22\x95\x10\x49\x62\xf9\x81\xc8\x8c\xe1\xee\xbe\x69\x3e\xe8\xf9\xf0\x0b\x2c\x2f\x4b\xcc\x44\x81\x4b\xc2\x64\x45\xf7\x5e\x7b\x0b\x89\x73\xc2\x36\xba\xb3\xde\x1c\xea\xee\xf8\x51\x5b\x57\x58\xba\x52\x4a\xce\x48\xf9\x37\x77\xaa\x5a\x49\x49\xca\x12\x67\xec\x4b\x15\xac\xb0\xfe\x7f\xa8\x78\xc0\x92\x94\x5f\xa8\xa0\xc6\xd1\xe3\xb8\xbf\xb9\x8e\x31\x2e\x25\xdf\x24\xb8\xbc\xbc\x4f\x43\x55\x3b\x35\x54\xb2\x1d\xd5\x81\x2d\x46\x4a\xe7\x94\xf2\x2d\xa6\x48\x08\x8a\x2e\xb0\x90\xf4\x46\x67\x08\x45\x6a\x83\x29\xfd\x1b\xeb\x6d\x8c\x02\x4f\x59\x50\x55\x0f\x98\xe3\xa2\x25\x27\x55\x86\x50\x74\x75\x71\xf8\xcb\x64\x5b\x4d\x0a\x17\xaa\xc6\x98\xcb\x9f\x2b\xb5\x5c\x73\x0d\x4b\x59\x66\xdb\xbd\x2a\x55\x2f\x39\x93\x25\xa7\x8b\x6a\x32\x66\xc9\x67\x1d\x4c\x85\xa2\x8b\x57\x5c\xa1\x20\x83\xca\xe0\xf6\x34\x86\x87\x5b\x2e\x25\xcf\x29\xb9\x90\xd0\x54\xb3\x02\x47\x38\x49\x5e\x18\x88\xf7\xf4\xe9\xdd\x9a\x16\xf3\xe2\x46\x0f\x33\x3f\x41\x20\x71\x99\x12\xb9\xfa\x04\xab\x3b\xd3\x27\x08\xf4\x28\x73\xf5\x09\x7e\x82\xeb\x77\x05\x51\x17\x5e\x42\x54\x05\xd6\xad\xf9\xbf\x23\x44\x5d\x69\x1e\x63\xaa\x40\x5f\xfc\xf2\xfe\xab\xd8\x2d\xc6\xfa\x2e\x62\xc4\xeb\x63\xdc\x3e\x6a\xc8\xaf\xd6\x4d\x87\x8f\xce\x0b\x8f\x31\x7a\xa9\x20\xdb\x7c\x7a\x18\x9e\x73\xd5\x44\xb5\x7d\x46\x85\xe7\x5b\x5c\xa8\x96\xc7\xbe\xfe\x40\xeb\x8c\xe0\x42\x39\xb3\x63\x43\x54\x2a\x82\xf3\x2a\x33\xc3\x45\x2b\xc1\xdf\x03\xad\x0a\xd5\x09\xd6\xa8\x78\xfd\xf0\x7f\xa8\xb4\x78\x82\xd7\x59\xb2\x05\xa9\x2d\x00\x5e\xa9\x84\x34\xf8\x55\xb9\x1f\x78\xcb\x13\x32\x84\x0b\x23\x55\x9d\x50\x9a\xee\xd7\xee\x77\xae\x48\x49\xf1\x4d\xbf\x25\x7e\xc5\x57\x59\xaa\x9b\x7b\x4c\xc1\x2b\xd5\xd6\x2e\xee\x69\x90\xba\x5c\x00\x30\xa2\xb1\xca\x0c\x83\xc6\xe6\x8e\xc9\x76\xd8\x7f\x46\xd5\xc5\x5e\xc7\x74\xf5\x53\xdd\x46\xed\x7c\x93\xc5\x2a\xa4\xed\xf1\xa0\x69\xa1\xd2\x9c\x08\x2c\x80\xdb\xb7\xf7\xae\xcc\xf4\x1b\x0e\x58\x65\x28\x23\x57\x9a\xe9\xa1\x9e\x32\x98\x82\xb6\xb6\xb6\x19\x4b\xde\xab\xdb\xfe\xe0\x0c\xe9\x5b\xff\xe0\x16\xef\x25\x7f\x8f\x59\x9d\xbd\xee\x86\xad\x29\x86\x7a\x7c\x59\xbd\xc9\x1d\x98\xd3\x02\x95\x9c\x87\x6d\x6f\xad\xb8\xbc\xb7\x3b\x74\xd7\x71\x3b\x82\x34\x2f\x33\x4c\xc3\x1d\x91\x1d\x70\xdb\xd5\xaa\xc1\x78\x40\xbb\x23\xc8\x13\xb5\x6c\xd4\xb2\xdf\x7c\x1c\x35\x6b\x88\x0b\x22\x37\x47\x90\xb6\xac\xca\x02\x66\xf1\x41\x9c\x0d\x9e\x25\x25\x4e\x85\xc4\xa5\x7c\xe6\xdc\x73\x69\x03\xed\x97\x2a\x56\xf7\xf9\xc0\xc0\xee\xce\x76\xbe\x8a\x5f\x4c\xb3\xf8\xf2\x01\x5e\x7d\x1a\x10\x75\x3c\x94\xa5\x8f\xd1\x56\xc1\xa0\xe3\x22\xde\x61\x96\x92\x07\xb8\xe8\x61\x24\xd2\x77\xef\xd5\xea\xfe\xa8\xef\xce\x71\x9a\xd1\x98\x8a\x8e\x81\x3d\x83\xb6\xe7\x3a\x80\x50\x41\xda\x7c\xac\xbc\xf5\x54\xe2\x7a\x3a\xdc\x47\xfc\x69\xe8\x3a\x86\x7b\x67\x4e\x66\x40\x76\xa7\x8f\x7d\x07\x51\x1f\x83\xc1\xb9\xe5\xcd\xa7\x78\xec\x9c\x58\xcb\x73\xd3\x42\xd4\xef\x72\x57\xa0\x82\x55\x87\x7c\x1c\xfe\xcd\x86\xc6\xcc\xb5\xda\x65\xa9\xb1\xfb\xdc\xba\xd1\x9b\x63\xd9\x66\xf6\x65\x9b\xb7\xc5\xfd\x38\x39\x3b\x89\xd0\xa5\xd0\x73\xf5\xef\x58\xe9\x48\x77\x47\x4a\xd2\x1a\x9d\x9c\x26\x00\x2d\x2b\xa5\x47\x2b\xb5\xda\x61\x63\x36\x22\xf4\x0c\x3f\xbb\xb8\x19\x18\x5a\xb4\x8a\x89\xbc\x29\x08\x5c\x00\xd8\x08\x01\x5b\xc5\x8c\x62\x09\x17\x40\x4f\x59\xde\x50\x8e\x3b\xd9\xe3\x78\x06\x48\x14\x34\x93\x03\xe8\xc0\xe1\x9f\xee\x5f\xc3\x36\x19\x96\x7e\x39\x19\xaf\x43\xa6\x31\xeb\x83\xb4\xec\x83\x51\x4e\xe0\xa2\xc8\xe9\x75\xde\xa1\xf9\xd1\xc2\x69\x5e\x64\x0f\x6d\x0e\x02\x09\xc2\x12\x6b\xb5\xe7\x14\xed\x14\x66\xd8\xf9\xe1\xc9\xae\x59\x64\x2a\x28\x7b\x7e\x59\xad\x55\x60\xc6\xc0\xb2\x27\x7e\x1f\xa3\x94\x70\xf6\xac\x79\xbb\xdd\xa5\x77\xfc\xd5\xca\xd4\xdf\x9a\xcf\xf7\xab\xbf\xcb\x12\xb2\xd9\xed\x13\x4b\x73\xed\x90\xbb\x7d\x02\x56\xa7\x17\x3d\x29\x91\xaf\x29\x51\x3f\x7f\xbc\xf9\x25\x19\xc0\xdd\x3e\x31\x3b\x45\x3d\x39\xd5\xed\x24\xaa\x3f\x22\x52\xa2\x33\x6e\x09\xfb\x28\xcd\xfa\xbb\x97\x2f\x24\x7c\xd7\x79\x2b\x85\x93\xe4\xf5\x15\x61\xf2\x2c\x13\x92\x30\x75\x9f\x7c\xf5\xee\x6d\x5d\x47\xcf\x38\x4e\x48\x02\x9d\x07\x5e\x58\x19\x27\xd2\x6a\xe3\x54\xd1\x5d\xdc\xaf\x80\x46\xac\x3e\xd4\x80\x56\x0c\x14\x5c\x3c\x0d\x6d\x54\x70\x61\xa3\xa6\x39\x2e\x9e\x88\xab\x40\x6d\xe4\xca\x09\x9e\x88\x5e\x01\x9b\x04\xee\xee\xcb\xe1\x5f\x66\x16\xfb\x13\x16\x5b\x42\xb1\xdf\xe6\x99\x7c\x32\xf2\xa8\x82\x6f\x99\xa8\x78\xc8\xba\x2d\x02\x69\xd1\x32\x70\x93\x77\x9e\x4e\xe2\x98\xce\xfa\x4d\x55\x79\xf9\xed\x97\xb1\x68\x40\x36\x3a\xfb\xd9\x12\xd6\x6f\x69\x1e\xc0\xae\x21\xfa\x90\x9b\xf7\x27\x0f\xf1\x6e\x5e\xb1\x3c\x80\xae\x5f\xbf\x3c\x85\x86\x82\xeb\x23\x64\xbf\x07\x7a\x80\x92\x0d\xd8\x47\x4a\xbf\xdb\x79\x80\x82\xde\xef\x43\x94\x65\x96\x3f\x74\xcc\x65\x96\xf7\xa1\x19\x6f\x7d\x1e\xc0\x36\xa0\xba\x44\xee\x8c\x9e\xf5\xde\xae\xf9\xf8\x2e\xe1\x98\xd9\xea\x5f\xe6\xb7\xa2\xcb\x71\xf3\x69\xf0\x72\xcb\x93\x9b\xfa\xf3\xd1\x24\xbb\xd2\xdf\x00\xa9\xec\xd9\x7c\xd9\xb5\x14\x05\x66\x20\xa6\x58\x88\x15\xd4\x9f\xde\xc1\xf5\x8b\xa3\x37\x54\xbb\x0a\xa7\x75\xfc\x0d\x46\xf5\xb4\x76\x97\x63\x05\xb9\xee\x81\x37\x8e\xda\x42\xaa\xbe\xb4\x3b\xa1\x82\xfa\xef\x43\x72\x1d\x23\xc4\xe0\x63\x87\xc4\x7d\x72\x3d\x4a\xfb\xe7\x26\x7c\x4e\xa4\xed\x78\xf9\x6a\xca\xbf\xa3\x8f\x6d\x63\xf6\x7a\xef\x57\x33\x78\x53\x79\xfa\x89\xbc\xe9\xda\x5f\x4d\xf5\x5c\x3b\xf2\x89\xa8\xe1\xb2\x5f\x4d\xf3\x03\x6a\x53\xed\xc6\xc3\x13\x88\x2f\xc7\x49\x76\xd5\x7c\x12\x7d\x3c\xad\xa6\x2f\x00\x9c\xe9\x4b\x64\xb5\x54\xf5\x2d\xcf\xe1\x5a\x3d\xa8\xac\xdb\x10\xb2\x43\x42\x15\xc5\x75\x4d\xf7\xb4\x53\x8d\xbe\x60\xf3\xc5\xb3\x6a\x28\x9e\x9f\x22\xa7\xc1\x35\x0b\xfa\xfa\x18\xa7\xcb\x62\xbd\xdc\x05\x6d\x00\x5d\xba\xd7\xcb\xf1\x2e\x58\x2f\xc7\x85\x0d\xbd\xdd\x4b\xc9\x59\x07\x43\x17\xec\x93\x52\xbd\xdf\xb2\x3c\xaf\x46\x8e\x20\x63\xc0\xfa\x10\xa1\x22\xf9\x64\x56\x75\x71\x3f\x31\x6b\x67\x21\x25\x7a\x97\xa6\x69\x37\xc3\x2e\xad\x8a\x6e\x4b\x50\x7d\xa0\x7a\xc1\xcb\x36\x9c\xae\xbd\xeb\x9f\xde\x7f\x5c\x2c\xc7\x1a\x68\xbd\xcc\x58\xb1\x97\xc6\x67\xef\xb0\x87\x7c\x85\xd6\x51\xf4\x7e\x36\x98\x4a\x23\xa3\x7c\x19\xaf\x63\x6d\xbf\xd7\xb2\x15\x81\xea\xa1\x97\x44\xdd\xa2\x18\xa6\xb6\x6f\x8a\xcf\xe1\xba\x59\x79\xcc\xe4\xc7\x70\x58\x8e\xab\x64\xbf\x1c\x57\xff\x42\xe4\xff\x02\x00\x00\xff\xff\x23\x86\xf0\x53\x39\x32\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 12857, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
